{"ast":null,"code":"import { Component } from 'react';\nimport ReactHtmlParser from 'react-html-parser';\nlet captcha_value = '';\nlet captcha_number = '';\nlet backgroundColor_value = '';\nlet fontColor_value = '';\nlet charMap_value = '';\nlet LoadCanvasTemplate_HTML = \"<div><canvas id=\\\"canv\\\"></canvas><div><a id=\\\"reload_href\\\"  style=\\\"cursor: pointer; color: blue\\\">Reload Captcha</a></div></div>\";\nlet LoadCanvasTemplateNoReload_HTML = \"<div><canvas id=\\\"canv\\\"></canvas><div><a id=\\\"reload_href\\\"  style=\\\"cursor: pointer; color: blue\\\"></a></div></div>\";\n;\nexport const loadCaptchaEnginge = function (numberOfCharacters) {\n  let backgroundColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'white';\n  let fontColor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'black';\n  let charMap = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  backgroundColor_value = backgroundColor;\n  fontColor_value = fontColor;\n  charMap_value = charMap;\n  captcha_number = numberOfCharacters;\n  let retVal = \"\";\n  let charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n\n  if (charMap === \"upper\") {\n    charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  } else if (charMap === \"lower\") {\n    charset = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n  } else if (charMap === \"numbers\") {\n    charset = \"0123456789\";\n  } else if (charMap === \"special_char\") {\n    charset = \"~`!@#$%^&*()_+-=[]{}\\|:'<>,.?/\";\n  }\n\n  let length = parseInt(numberOfCharacters);\n\n  for (let i = 0, n = charset.length; i < length; ++i) {\n    retVal += charset.charAt(Math.floor(Math.random() * n));\n  }\n\n  let captcha = retVal;\n  captcha_value = captcha;\n  let length_height_canvas = Math.round(parseInt(length) / 3);\n  let canvas = document.getElementById('canv'),\n      ctx = canvas.getContext('2d'),\n      img = document.getElementById('image');\n  let text = captcha;\n  let x = 12.5;\n  let y = 15;\n  let lineheight = 30;\n  let canvas_height = (parseInt(length) - parseInt(length_height_canvas)) * 20;\n  let lines = text.split('\\n');\n  let lineLengthOrder = lines.slice(0).sort(function (a, b) {\n    return b.length - a.length;\n  });\n  ctx.canvas.width = parseInt(length) * 25;\n  ctx.canvas.height = lines.length * lineheight;\n  ctx.fillStyle = backgroundColor;\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.textBaseline = \"middle\";\n  ctx.font = \"italic 20px Arial\";\n  ctx.fillStyle = fontColor;\n  let num = 0;\n\n  for (let i = 0; i < parseInt(length); i++) {\n    num = parseInt(num) + 1;\n    let heigt_num = 20 * num;\n    ctx.fillText(retVal[i], heigt_num, Math.round(Math.random() * (15 - 12) + 12));\n  }\n\n  document.getElementById(\"reload_href\").onclick = function () {\n    loadCaptchaEnginge(captcha_number, backgroundColor, fontColor, charMap);\n  };\n};\nexport const validateCaptcha = function (userValue) {\n  let reload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (userValue != captcha_value) {\n    if (reload == true) {\n      loadCaptchaEnginge(captcha_number, backgroundColor_value, fontColor_value, charMap_value);\n    }\n\n    return false;\n  } else {\n    return true;\n  }\n};\nexport class LoadCanvasTemplate extends Component {\n  render() {\n    let reload_text = \"\";\n    let reload_color = \"\";\n    LoadCanvasTemplate_HTML = \"<div><canvas id=\\\"canv\\\" style=\\\"background-color: blue;\\\"></canvas><div><a id=\\\"reload_href\\\"  style=\\\"cursor: pointer; color: blue\\\">Reload Captcha</a></div></div>\";\n\n    if (this.props.reloadText) {\n      reload_text = this.props.reloadText;\n    }\n\n    if (this.props.reloadColor) {\n      reload_color = this.props.reloadColor;\n    }\n\n    if (reload_text == \"\") {\n      reload_text = \"Reload Captcha\";\n    }\n\n    if (reload_color == \"\") {\n      reload_color = \"blue\";\n    }\n\n    LoadCanvasTemplate_HTML = \"<div><canvas id=\\\"canv\\\"></canvas><div><a id=\\\"reload_href\\\"  style=\\\"cursor: pointer; color: \" + reload_color + \"\\\">\" + reload_text + \"</a></div></div>\";\n    return ReactHtmlParser(LoadCanvasTemplate_HTML);\n  }\n\n}\n;\nexport class LoadCanvasTemplateNoReload extends Component {\n  render() {\n    return ReactHtmlParser(LoadCanvasTemplateNoReload_HTML);\n  }\n\n}\n;","map":{"version":3,"names":["Component","ReactHtmlParser","captcha_value","captcha_number","backgroundColor_value","fontColor_value","charMap_value","LoadCanvasTemplate_HTML","LoadCanvasTemplateNoReload_HTML","loadCaptchaEnginge","numberOfCharacters","backgroundColor","fontColor","charMap","retVal","charset","length","parseInt","i","n","charAt","Math","floor","random","captcha","length_height_canvas","round","canvas","document","getElementById","ctx","getContext","img","text","x","y","lineheight","canvas_height","lines","split","lineLengthOrder","slice","sort","a","b","width","height","fillStyle","fillRect","textBaseline","font","num","heigt_num","fillText","onclick","validateCaptcha","userValue","reload","LoadCanvasTemplate","render","reload_text","reload_color","props","reloadText","reloadColor","LoadCanvasTemplateNoReload"],"sources":["E:/project/cmrl_project/node_modules/react-simple-captcha/react-simple-captcha.js"],"sourcesContent":["import { Component } from 'react';\nimport ReactHtmlParser from 'react-html-parser';\n\nlet captcha_value = '';\nlet captcha_number = '';\nlet backgroundColor_value = '';\nlet fontColor_value = '';\nlet charMap_value = '';\nlet LoadCanvasTemplate_HTML = \"<div><canvas id=\\\"canv\\\"></canvas><div><a id=\\\"reload_href\\\"  style=\\\"cursor: pointer; color: blue\\\">Reload Captcha</a></div></div>\";\nlet LoadCanvasTemplateNoReload_HTML = \"<div><canvas id=\\\"canv\\\"></canvas><div><a id=\\\"reload_href\\\"  style=\\\"cursor: pointer; color: blue\\\"></a></div></div>\";;\n\n\nexport const loadCaptchaEnginge = (numberOfCharacters, backgroundColor = 'white', fontColor = 'black', charMap = '') => {\n\n    backgroundColor_value = backgroundColor;\n    fontColor_value = fontColor;\n    charMap_value = charMap;\n    captcha_number = numberOfCharacters;\n    let retVal = \"\";\n    let charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n    if (charMap === \"upper\") {\n        charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n    } else if (charMap === \"lower\") {\n        charset = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n    }\n    else if (charMap === \"numbers\") {\n        charset = \"0123456789\";\n    }\n    else if (charMap === \"special_char\") {\n        charset = \"~`!@#$%^&*()_+-=[]{}\\|:'<>,.?/\";\n    }\n\n    let length = parseInt(numberOfCharacters);\n\n\n\n    for (let i = 0, n = charset.length; i < length; ++i) {\n        retVal += charset.charAt(Math.floor(Math.random() * n));\n    }\n\n    let captcha = retVal;\n\n    captcha_value = captcha;\n\n\n\n    let length_height_canvas = Math.round(parseInt(length) / 3);\n\n    let canvas = document.getElementById('canv'),\n        ctx = canvas.getContext('2d'),\n        img = document.getElementById('image');\n    let text = captcha;\n    let x = 12.5;\n    let y = 15;\n    let lineheight = 30;\n\n    let canvas_height = (parseInt(length) - parseInt(length_height_canvas)) * 20;\n    let lines = text.split('\\n');\n    let lineLengthOrder = lines.slice(0).sort(function (a, b) {\n        return b.length - a.length;\n    });\n    ctx.canvas.width = parseInt(length) * 25;\n    ctx.canvas.height = (lines.length * lineheight);\n\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n\n    ctx.textBaseline = \"middle\";\n    ctx.font = \"italic 20px Arial\";\n    ctx.fillStyle = fontColor;\n\n\n\n\n    let num = 0;\n    for (let i = 0; i < parseInt(length); i++) {\n        num = parseInt(num) + 1;\n        let heigt_num = 20 * num;\n        ctx.fillText(retVal[i], heigt_num, Math.round(Math.random() * (15 - 12) + 12));\n    }\n\n    document.getElementById(\"reload_href\").onclick = function () {\n        loadCaptchaEnginge(captcha_number, backgroundColor, fontColor, charMap);\n    }\n\n};\n\nexport const validateCaptcha = (userValue, reload = true) => {\n    if (userValue != captcha_value) {\n        if (reload == true) {\n            loadCaptchaEnginge(captcha_number, backgroundColor_value, fontColor_value, charMap_value);\n        }\n\n        return false;\n    }\n\n    else {\n        return true;\n    }\n};\n\nexport class LoadCanvasTemplate extends Component {\n\n    render() {\n        let reload_text = \"\";\n        let reload_color = \"\";\n        LoadCanvasTemplate_HTML = \"<div><canvas id=\\\"canv\\\" style=\\\"background-color: blue;\\\"></canvas><div><a id=\\\"reload_href\\\"  style=\\\"cursor: pointer; color: blue\\\">Reload Captcha</a></div></div>\";\n\n        if (this.props.reloadText) {\n            reload_text = this.props.reloadText;\n\n\n        }\n\n        if (this.props.reloadColor) {\n            reload_color = this.props.reloadColor;\n        }\n\n        if (reload_text == \"\") {\n            reload_text = \"Reload Captcha\";\n        }\n\n        if (reload_color == \"\") {\n            reload_color = \"blue\";\n        }\n\n        LoadCanvasTemplate_HTML = \"<div><canvas id=\\\"canv\\\"></canvas><div><a id=\\\"reload_href\\\"  style=\\\"cursor: pointer; color: \" + reload_color + \"\\\">\" + reload_text + \"</a></div></div>\";\n\n        return (ReactHtmlParser(LoadCanvasTemplate_HTML));\n    }\n\n};\n\nexport class LoadCanvasTemplateNoReload extends Component {\n\n    render() {\n        return (ReactHtmlParser(LoadCanvasTemplateNoReload_HTML));\n    }\n\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}