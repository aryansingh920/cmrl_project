{"ast":null,"code":"import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport '../../../../../disk/captcha.css';\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nfunction genetateCaptcha(max) {\n  var text = '';\n  var i = void 0;\n\n  for (i = 0; i < max; i += 1) {\n    switch (Math.floor(Math.random() * 3)) {\n      case 0:\n        text += String.fromCharCode(48 + Math.floor(Math.random() * 10));\n        break;\n\n      case 1:\n        text += String.fromCharCode(65 + Math.floor(Math.random() * 26));\n        break;\n\n      case 2:\n        text += String.fromCharCode(97 + Math.floor(Math.random() * 26));\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return text;\n}\n\nvar Captcha = function (_Component) {\n  inherits(Captcha, _Component);\n\n  function Captcha() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    classCallCheck(this, Captcha);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Captcha.__proto__ || Object.getPrototypeOf(Captcha)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      solution: genetateCaptcha(_this.props.length),\n      input: ''\n    }, _this.componentDidMount = function () {\n      _this.drawCaptcha();\n    }, _this.drawCaptcha = function () {\n      var solution = _this.state.solution;\n      var _this$canvas = _this.canvas,\n          width = _this$canvas.width,\n          height = _this$canvas.height;\n\n      var ctx = _this.canvas.getContext('2d');\n\n      ctx.clearRect(0, 0, width, height);\n      ctx.font = getRandomInt(30, 40) + 'px serif';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(solution, width / 2, height / 2 + 3);\n      ctx.strokeStyle = 'purple';\n      ctx.beginPath(), ctx.moveTo(getRandomInt(5, 20), getRandomInt(5, 20)), ctx.lineTo(width - getRandomInt(5, 20), height - getRandomInt(5, 20)), ctx.stroke(), ctx.moveTo(getRandomInt(15, 30), getRandomInt(15, 30)), ctx.lineTo(width - getRandomInt(15, 30), height - getRandomInt(15, 30)), ctx.stroke(), ctx.moveTo(getRandomInt(5, 20), height - getRandomInt(5, 20)), ctx.lineTo(width - getRandomInt(5, 20), getRandomInt(5, 20)), ctx.stroke(), ctx.moveTo(getRandomInt(15, 30), height - getRandomInt(15, 30)), ctx.lineTo(width - getRandomInt(15, 30), getRandomInt(15, 30)), ctx.stroke(), ctx.moveTo(getRandomInt(width / 10, width / 10 + 10), height - getRandomInt(15, 30)), ctx.lineTo(getRandomInt(width / 2, width / 2 + 10), getRandomInt(5, 20)), ctx.stroke(), ctx.closePath();\n    }, _this.refresh = function () {\n      _this.setState({\n        solution: genetateCaptcha(_this.props.length),\n        input: ''\n      }, function () {\n        return _this.drawCaptcha();\n      });\n    }, _this.playAudio = function () {\n      var solution = _this.state.solution;\n      var audio = new SpeechSynthesisUtterance(solution.toString().split('').join(' '));\n      audio.rate = 0.6;\n      window.speechSynthesis.speak(audio);\n    }, _this.handleChange = function (e) {\n      var onChange = _this.props.onChange;\n      var solution = _this.state.solution;\n\n      _this.setState({\n        input: e.target.value\n      });\n\n      onChange(e.target.value === solution.toString());\n    }, _temp), possibleConstructorReturn(_this, _ret);\n  }\n\n  createClass(Captcha, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var placeholder = this.props.placeholder;\n      var input = this.state.input;\n      return React.createElement('div', {\n        className: 'rnc'\n      }, React.createElement('div', {\n        className: 'rnc-row'\n      }, React.createElement('canvas', {\n        ref: function ref(el) {\n          return _this2.canvas = el;\n        },\n        width: 200,\n        height: 50,\n        className: 'rnc-canvas',\n        'data-testid': 'captcha-canvas'\n      }), React.createElement('div', {\n        className: 'rnc-column'\n      }, React.createElement('button', {\n        type: 'button',\n        'aria-label': 'get new captcha',\n        onClick: this.refresh,\n        className: 'rnc-button',\n        'data-testid': 'captcha-refresh'\n      }, React.createElement('svg', {\n        xmlns: 'http://www.w3.org/2000/svg',\n        viewBox: '0 0 24 24'\n      }, React.createElement('g', {\n        'data-name': 'Layer 2'\n      }, React.createElement('g', {\n        'data-name': 'refresh'\n      }, React.createElement('rect', {\n        width: '24',\n        height: '24',\n        opacity: '0'\n      }), React.createElement('path', {\n        d: 'M20.3 13.43a1 1 0 0 0-1.25.65A7.14 7.14 0 0 1 12.18 19 7.1 7.1 0 0 1 5 12a7.1 7.1 0 0 1 7.18-7 7.26 7.26 0 0 1 4.65 1.67l-2.17-.36a1 1 0 0 0-1.15.83 1 1 0 0 0 .83 1.15l4.24.7h.17a1 1 0 0 0 .34-.06.33.33 0 0 0 .1-.06.78.78 0 0 0 .2-.11l.09-.11c0-.05.09-.09.13-.15s0-.1.05-.14a1.34 1.34 0 0 0 .07-.18l.75-4a1 1 0 0 0-2-.38l-.27 1.45A9.21 9.21 0 0 0 12.18 3 9.1 9.1 0 0 0 3 12a9.1 9.1 0 0 0 9.18 9A9.12 9.12 0 0 0 21 14.68a1 1 0 0 0-.7-1.25z'\n      }))))), React.createElement('button', {\n        type: 'button',\n        'aria-label': 'play audio',\n        onClick: this.playAudio,\n        className: 'rnc-button',\n        'data-testid': 'captcha-audio'\n      }, React.createElement('svg', {\n        xmlns: 'http://www.w3.org/2000/svg',\n        viewBox: '0 0 24 24'\n      }, React.createElement('g', {\n        'data-name': 'Layer 2'\n      }, React.createElement('g', {\n        'data-name': 'volume-up'\n      }, React.createElement('rect', {\n        width: '24',\n        height: '24',\n        opacity: '0'\n      }), React.createElement('path', {\n        d: 'M18.28 8.37a1 1 0 1 0-1.56 1.26 4 4 0 0 1 0 4.74A1 1 0 0 0 17.5 16a1 1 0 0 0 .78-.37 6 6 0 0 0 0-7.26z'\n      }), React.createElement('path', {\n        d: 'M19.64 5.23a1 1 0 1 0-1.28 1.54A6.8 6.8 0 0 1 21 12a6.8 6.8 0 0 1-2.64 5.23 1 1 0 0 0-.13 1.41A1 1 0 0 0 19 19a1 1 0 0 0 .64-.23A8.75 8.75 0 0 0 23 12a8.75 8.75 0 0 0-3.36-6.77z'\n      }), React.createElement('path', {\n        d: 'M15 3.12a1 1 0 0 0-1 0L7.52 7.57h-5a1 1 0 0 0-1 1v6.86a1 1 0 0 0 1 1h5l6.41 4.4a1.06 1.06 0 0 0 .57.17 1 1 0 0 0 1-1V4a1 1 0 0 0-.5-.88zm-1.47 15L8.4 14.6a1 1 0 0 0-.57-.17H3.5V9.57h4.33a1 1 0 0 0 .57-.17l5.1-3.5z'\n      }))))))), React.createElement('input', {\n        value: input,\n        onChange: this.handleChange,\n        placeholder: placeholder,\n        className: 'rnc-input',\n        'data-testid': 'captcha-input'\n      }));\n    }\n  }]);\n  return Captcha;\n}(Component);\n\nCaptcha.defaultProps = {\n  placeholder: 'Insert captcha',\n  length: 6\n};\nCaptcha.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  placeholder: PropTypes.string,\n  length: PropTypes.number\n};\nexport default Captcha;","map":{"version":3,"mappings":"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","names":["getRandomInt","min","max","Math","ceil","floor","random","genetateCaptcha","text","i","String","fromCharCode","Captcha","state","solution","_this","props","length","input","componentDidMount","drawCaptcha","canvas","width","height","ctx","getContext","clearRect","font","textAlign","textBaseline","fillText","strokeStyle","beginPath","moveTo","lineTo","stroke","closePath","refresh","setState","playAudio","audio","SpeechSynthesisUtterance","toString","split","join","rate","speechSynthesis","speak","handleChange","onChange","e","target","value","placeholder","React","className","_this2","el","xmlns","viewBox","opacity","d","Component","defaultProps","propTypes","PropTypes","func","isRequired","string","number"],"sources":["E:\\project\\cmrl_project\\node_modules\\demos-react-captcha\\src\\captcha.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport '/disk/captcha.css';\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nfunction genetateCaptcha(max) {\n  let text = '';\n  let i;\n  for (i = 0; i < max; i += 1) {\n    switch (Math.floor(Math.random() * 3)) {\n      case 0: text += String.fromCharCode(48 + Math.floor(Math.random() * 10)); break;\n      case 1: text += String.fromCharCode(65 + Math.floor(Math.random() * 26)); break;\n      case 2: text += String.fromCharCode(97 + Math.floor(Math.random() * 26)); break;\n      default: break;\n    }\n  }\n  return text;\n}\n\nclass Captcha extends Component {\n  state = { solution: genetateCaptcha(this.props.length), input: '' };\n\n  componentDidMount = () => {\n    this.drawCaptcha();\n  };\n\n  drawCaptcha = () => {\n    const { solution } = this.state;\n    const { width, height } = this.canvas;\n    const ctx = this.canvas.getContext('2d');\n    ctx.clearRect(0, 0, width, height);\n    ctx.font = `${getRandomInt(30, 40)}px serif`;\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillText(solution, width / 2, height / 2 + 3);\n    ctx.strokeStyle = 'purple';\n\n    ctx.beginPath(),\n      ctx.moveTo(getRandomInt(5, 20), getRandomInt(5, 20)), ctx.lineTo(width - getRandomInt(5, 20), height - getRandomInt(5, 20)), ctx.stroke(),\n      ctx.moveTo(getRandomInt(15, 30), getRandomInt(15, 30)), ctx.lineTo(width - getRandomInt(15, 30), height - getRandomInt(15, 30)), ctx.stroke(),\n      ctx.moveTo(getRandomInt(5, 20), height - getRandomInt(5, 20)), ctx.lineTo(width - getRandomInt(5, 20), getRandomInt(5, 20)), ctx.stroke(),\n      ctx.moveTo(getRandomInt(15, 30), height - getRandomInt(15, 30)), ctx.lineTo(width - getRandomInt(15, 30), getRandomInt(15, 30)), ctx.stroke(),\n      ctx.moveTo(getRandomInt(width / 10, (width / 10) + 10), height - getRandomInt(15, 30)), ctx.lineTo(getRandomInt(width / 2, width / 2 + 10), getRandomInt(5, 20)), ctx.stroke(),\n      ctx.closePath();\n  };\n\n  refresh = () => {\n    this.setState(\n      {\n        solution: genetateCaptcha(this.props.length),\n        input: ''\n      },\n      () => this.drawCaptcha()\n    );\n  };\n\n  playAudio = () => {\n    const { solution } = this.state;\n    const audio = new SpeechSynthesisUtterance(\n      solution\n        .toString()\n        .split('')\n        .join(' ')\n    );\n    audio.rate = 0.6;\n    window.speechSynthesis.speak(audio);\n  };\n\n  handleChange = e => {\n    const { onChange } = this.props;\n    const { solution } = this.state;\n    this.setState({ input: e.target.value });\n    onChange(e.target.value === solution.toString());\n  };\n\n  render() {\n    const { placeholder } = this.props;\n    const { input } = this.state;\n\n    return (\n        <div className=\"rnc\">\n          <div className=\"rnc-row\">\n            <canvas\n              ref={el => (this.canvas = el)}\n              width={200}\n              height={50}\n              className=\"rnc-canvas\"\n              data-testid=\"captcha-canvas\"\n            />\n            <div className=\"rnc-column\">\n              <button\n                type=\"button\"\n                aria-label=\"get new captcha\"\n                onClick={this.refresh}\n                className=\"rnc-button\"\n                data-testid=\"captcha-refresh\"\n              >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                  <g data-name=\"Layer 2\">\n                    <g data-name=\"refresh\">\n                      <rect width=\"24\" height=\"24\" opacity=\"0\" />\n                      <path d=\"M20.3 13.43a1 1 0 0 0-1.25.65A7.14 7.14 0 0 1 12.18 19 7.1 7.1 0 0 1 5 12a7.1 7.1 0 0 1 7.18-7 7.26 7.26 0 0 1 4.65 1.67l-2.17-.36a1 1 0 0 0-1.15.83 1 1 0 0 0 .83 1.15l4.24.7h.17a1 1 0 0 0 .34-.06.33.33 0 0 0 .1-.06.78.78 0 0 0 .2-.11l.09-.11c0-.05.09-.09.13-.15s0-.1.05-.14a1.34 1.34 0 0 0 .07-.18l.75-4a1 1 0 0 0-2-.38l-.27 1.45A9.21 9.21 0 0 0 12.18 3 9.1 9.1 0 0 0 3 12a9.1 9.1 0 0 0 9.18 9A9.12 9.12 0 0 0 21 14.68a1 1 0 0 0-.7-1.25z\" />\n                    </g>\n                  </g>\n                </svg>\n              </button>\n              <button\n                type=\"button\"\n                aria-label=\"play audio\"\n                onClick={this.playAudio}\n                className=\"rnc-button\"\n                data-testid=\"captcha-audio\"\n              >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                  <g data-name=\"Layer 2\">\n                    <g data-name=\"volume-up\">\n                      <rect width=\"24\" height=\"24\" opacity=\"0\" />\n                      <path d=\"M18.28 8.37a1 1 0 1 0-1.56 1.26 4 4 0 0 1 0 4.74A1 1 0 0 0 17.5 16a1 1 0 0 0 .78-.37 6 6 0 0 0 0-7.26z\" />\n                      <path d=\"M19.64 5.23a1 1 0 1 0-1.28 1.54A6.8 6.8 0 0 1 21 12a6.8 6.8 0 0 1-2.64 5.23 1 1 0 0 0-.13 1.41A1 1 0 0 0 19 19a1 1 0 0 0 .64-.23A8.75 8.75 0 0 0 23 12a8.75 8.75 0 0 0-3.36-6.77z\" />\n                      <path d=\"M15 3.12a1 1 0 0 0-1 0L7.52 7.57h-5a1 1 0 0 0-1 1v6.86a1 1 0 0 0 1 1h5l6.41 4.4a1.06 1.06 0 0 0 .57.17 1 1 0 0 0 1-1V4a1 1 0 0 0-.5-.88zm-1.47 15L8.4 14.6a1 1 0 0 0-.57-.17H3.5V9.57h4.33a1 1 0 0 0 .57-.17l5.1-3.5z\" />\n                    </g>\n                  </g>\n                </svg>\n              </button>\n            </div>\n          </div>\n          <input\n            value={input}\n            onChange={this.handleChange}\n            placeholder={placeholder}\n            className=\"rnc-input\"\n            data-testid=\"captcha-input\"\n          />\n        </div>\n    );\n  }\n}\n\nCaptcha.defaultProps = {\n  placeholder: 'Insert captcha',\n  length: 6\n};\n\nCaptcha.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  placeholder: PropTypes.string,\n  length: PropTypes.number\n};\n\nexport default Captcha;\n"]},"metadata":{},"sourceType":"module"}